package nl.mranderson.pokefeeds.videoimport android.arch.lifecycle.LifecycleOwnerimport android.arch.lifecycle.LiveDataimport android.arch.lifecycle.Observerimport android.arch.lifecycle.ViewModelProvidersimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.support.v7.widget.LinearLayoutManagerimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.schedulers.Schedulersimport kotlinx.android.synthetic.main.fragment_list.*import nl.mranderson.pokefeeds.Rimport nl.mranderson.pokefeeds.interfaces.ListItemListenerimport nl.mranderson.pokefeeds.video.model.*class VideoFragment : Fragment() {    private lateinit var mAdapter: VideoAdapter    private lateinit var viewModel: VideoViewModel    private lateinit var videoNavigation: VideoNavigation    @Suppress("LabeledExpression")    private val updateUi = Observer { newState: VideoState? ->        if (newState == null) {            return@Observer        }        showState(newState)    }    private fun <T> LiveData<T>.reObserve(owner: LifecycleOwner, observer: Observer<T>) {        removeObserver(observer)        observe(owner, observer)    }    private var View.isVisible        get() = visibility == View.VISIBLE        set(value) {            visibility = when (value) {                true -> View.VISIBLE                else -> View.GONE            }        }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        return inflater.inflate(R.layout.fragment_list, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        viewModel = ViewModelProviders.of(this, VideoViewModelFactory(VideoService(Schedulers.io()), AndroidSchedulers.mainThread())).get(VideoViewModel::class.java)        videoNavigation = VideoNavigation(activity)        swipe_container.setColorSchemeResources(android.R.color.holo_blue_bright,                android.R.color.holo_green_light,                android.R.color.holo_orange_light,                android.R.color.holo_red_light)        list.layoutManager = LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false)        list.addItemDecoration(ItemDecorator())        mAdapter = VideoAdapter(this.context, ListItemListener { item -> })        list.adapter = mAdapter        empty_button.setOnClickListener { viewModel.presenter.onEmptyButtonTapped() }        exception_button.setOnClickListener { viewModel.presenter.onRetryButtonTapped() }        swipe_container.setOnRefreshListener { viewModel.presenter.onRefreshPulled() }        viewModel.videoViewState.currentState.reObserve(this, updateUi)    }    private fun showState(newState: VideoState) {        spinner.isVisible = newState is VideoState.Loading        empty_container.isVisible = newState is VideoState.Done        exception_container.isVisible = newState is VideoState.Error        swipe_container.isVisible = newState is VideoState.Done        swipe_container.isRefreshing = false        mAdapter.update(VideoState.Done)    }}