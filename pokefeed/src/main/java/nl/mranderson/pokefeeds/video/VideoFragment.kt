package nl.mranderson.pokefeeds.videoimport android.arch.lifecycle.Observerimport android.arch.lifecycle.ViewModelProvidersimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.support.v7.widget.LinearLayoutManagerimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport kotlinx.android.synthetic.main.fragment_list.*import nl.mranderson.pokefeeds.Rimport nl.mranderson.pokefeeds.video.model.Videoimport nl.mranderson.pokefeeds.video.model.VideoViewModelimport nl.mranderson.pokefeeds.video.model.VideoViewModelFactoryimport nl.mranderson.pokefeeds.video.model.VideoViewState//TODO only update the new items? if I don't and do the whole list it will clean up the list.class VideoFragment : Fragment() {    private lateinit var mAdapter: VideoAdapter    private lateinit var viewModel: VideoViewModel    private lateinit var videoNavigation: VideoNavigation    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        return inflater.inflate(R.layout.fragment_list, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        val videoViewState = VideoViewState()        val videoPresenter = VideoPresenter(videoViewState, VideoInteractor())        viewModel = ViewModelProviders.of(this, VideoViewModelFactory(videoPresenter, videoViewState)).get(VideoViewModel::class.java)        videoNavigation = VideoNavigation(activity)        swipe_container.setColorSchemeResources(android.R.color.holo_blue_bright,                android.R.color.holo_green_light,                android.R.color.holo_orange_light,                android.R.color.holo_red_light)        val layoutManager = LinearLayoutManager(activity)        layoutManager.orientation = LinearLayoutManager.VERTICAL        list.layoutManager = layoutManager        list.setHasFixedSize(true)        mAdapter = VideoAdapter(activity) { link -> viewModel.presenter.onItemLinkTapped(link) }        list.adapter = mAdapter        setListeners()        bindViews()    }    private fun bindViews() {        viewModel.videoViewState.isLoading.observe(this, Observer { isLoading -> showLoading(isLoading) })        viewModel.videoViewState.isFailed.observe(this, Observer { isFailed -> showError(isFailed) })        viewModel.videoViewState.flowStep.observe(this, Observer { step -> videoNavigation.doStep(step) })        viewModel.videoViewState.data.observe(this, Observer { response -> if (response != null) showData(response) else showEmpty() })    }    private fun showData(response: List<Video>?) {        swipe_container.visibility = View.VISIBLE        swipe_container.isRefreshing = false        mAdapter.update(response)    }    private fun showLoading(loading: Boolean?) {        if (loading != null && loading) {            spinner.visibility = View.VISIBLE        } else {            spinner.visibility = View.GONE        }    }    private fun showEmpty() {        empty_container.visibility = View.VISIBLE    }    private fun showError(failed: Boolean?) {        if (failed != null && failed) {            exception_container.visibility = View.VISIBLE        } else {            exception_container.visibility = View.GONE        }    }    private fun setListeners() {        empty_button.setOnClickListener { viewModel.presenter.onEmptyButtonTapped() }        exception_button.setOnClickListener { viewModel.presenter.onRetryButtonTapped() }        swipe_container.setOnRefreshListener { viewModel.presenter.onRefreshPulled() }    }}