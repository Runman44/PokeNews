package nl.mranderson.pokefeeds.videoimport android.content.Intentimport android.net.Uriimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.support.v4.widget.SwipeRefreshLayoutimport android.support.v7.widget.LinearLayoutManagerimport android.support.v7.widget.RecyclerViewimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Buttonimport android.widget.ProgressBarimport android.widget.RelativeLayoutimport nl.mranderson.pokefeeds.Rimport nl.mranderson.pokefeeds.network.GenericItem//TODO butterknife//TODO Firebase analytics//TODO only update the new items? if I don't and do the whole list it will clean up the list.//TODO using a own object. Not using the ParsedItem. Only in network package.//TODO make sure the controller uses the correct fields.//TODO use MVP pattern.class VideoFragment : Fragment(), VideoContract.View {    private var swipeLayout: SwipeRefreshLayout? = null    private var spinnerLayout: ProgressBar? = null    private var emptyLayout: RelativeLayout? = null    private var exceptionLayout: RelativeLayout? = null    //    private FirebaseAnalytics mFirebaseAnalytics;    protected var mRecyclerView: RecyclerView    private var presenter: VideoPresenter? = null    private var mAdapter: VideoAdapter? = null    private var emptyButton: Button? = null    private var retryButton: Button? = null    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        return inflater.inflate(R.layout.fragment_list, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        bindViews()        mRecyclerView = getView()!!.findViewById<View>(R.id.list) as RecyclerView        swipeLayout = getView()!!.findViewById<View>(R.id.swipe_container) as SwipeRefreshLayout        spinnerLayout = getView()!!.findViewById<View>(R.id.spinner) as ProgressBar        emptyLayout = getView()!!.findViewById<View>(R.id.empty_container) as RelativeLayout        exceptionLayout = getView()!!.findViewById<View>(R.id.exception_container) as RelativeLayout        retryButton = getView()!!.findViewById<View>(R.id.exception_button) as Button        emptyButton = getView()!!.findViewById<View>(R.id.empty_button) as Button        swipeLayout!!.setColorSchemeResources(android.R.color.holo_blue_bright,                android.R.color.holo_green_light,                android.R.color.holo_orange_light,                android.R.color.holo_red_light)        val layoutManager = LinearLayoutManager(activity)        layoutManager.orientation = LinearLayoutManager.VERTICAL        mRecyclerView.layoutManager = layoutManager        mRecyclerView.setHasFixedSize(true)        mAdapter = VideoAdapter(activity) { link -> presenter!!.onItemLinkTapped(link) }        mRecyclerView.adapter = mAdapter        setListeners()        presenter = createPresenter()        presenter!!.attach(this)        presenter!!.onLoadData()    }    private fun bindViews() {            }    private fun setListeners() {        emptyButton!!.setOnClickListener { v -> presenter!!.onEmptyButtonTapped() }        retryButton!!.setOnClickListener { v -> presenter!!.onRetryButtonTapped() }        swipeLayout!!.setOnRefreshListener { presenter!!.onRefreshSwiped() }    }    override fun onDestroyView() {        super.onDestroyView()        presenter!!.detach()    }    override fun onReadMoreClicked(link: String) {        try {            val intent = Intent(Intent.ACTION_VIEW)            intent.data = Uri.parse(link)            startActivity(intent)        } catch (ex: Exception) {            setExceptionState()        }    }    private fun createPresenter(): VideoPresenter {        val model = VideoInteractor()        return VideoPresenter(model)    }    override fun setListState(items: List<GenericItem>) {        swipeLayout!!.isRefreshing = false        swipeLayout!!.visibility = View.VISIBLE        spinnerLayout!!.visibility = View.GONE        emptyLayout!!.visibility = View.GONE        exceptionLayout!!.visibility = View.GONE        mAdapter!!.update(items)    }    override fun setExceptionState() {        exceptionLayout!!.visibility = View.VISIBLE        swipeLayout!!.visibility = View.GONE        spinnerLayout!!.visibility = View.GONE        emptyLayout!!.visibility = View.GONE    }    override fun setLoadingState() {        spinnerLayout!!.visibility = View.VISIBLE        swipeLayout!!.visibility = View.GONE        emptyLayout!!.visibility = View.GONE        exceptionLayout!!.visibility = View.GONE    }    override fun setEmptyState() {        emptyLayout!!.visibility = View.VISIBLE        swipeLayout!!.visibility = View.GONE        spinnerLayout!!.visibility = View.GONE        exceptionLayout!!.visibility = View.GONE    }}